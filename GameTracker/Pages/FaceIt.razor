@using GameTracker.Models.FaceItModels
@using GameTracker.Interfaces.FaceItInterfaces
@inject IFaceItInfoService FaceItInfoService
@inject IFaceItStatsService FaceItStatsService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@page "/faceit"

<div class="faceit-search-bar">
	<div class="faceit-search">
		<input @bind="searchName"
		placeholder="Søg efter spiller..."
		class="search-input" />

		<button class="search-btn" @onclick="HandleSearch" aria-label="Søg">
			<svg viewBox="0 0 24 24" width="18" height="18" aria-hidden="true">
				<path d="M15.5 14h-.79l-.28-.27a6.471 6.471 0 0 0
                         1.57-4.23A6.5 6.5 0 1 0 9.5 16.5c1.61 0
                         3.09-.59 4.23-1.57l.27.28v.79l5 5
                         1.5-1.5-5-5zm-6 0C7.01 14 5 11.99
                         5 9.5S7.01 5 9.5 5 14 7.01 14
                         9.5 11.99 14 9.5 14z" />
			</svg>
		</button>
	</div>
</div>

@if (allPlayers.Count > 0 && allStats.Count > 0)
{
	@for (int i = 0; i < allPlayers.Count; i++)
	{
		<GameTracker.Components.FaceItPlayerOverviewComponent Player="allPlayers[i]" FaceItStats="allStats[i]" />
		<button class="remove-btn" @onclick="() => RemovePlayer(i)">
			🗑 Fjern
		</button>

	}
}


@code {
	private string searchName = string.Empty;
	private Player? player;
	private FaceItStats? faceItStats;
	private List<Player> allPlayers = new List<Player>();
	private List<FaceItStats> allStats = new List<FaceItStats>();

	protected override async Task OnInitializedAsync()
	{
		await UpdateAllPlayers();
	}

	private async Task UpdateAllPlayers()
	{
		var tempAllPlayers = await LocalStorage.GetItemAsync<List<Player>>("allPlayersList");

		if (tempAllPlayers is not null)
		{
			foreach (var player in tempAllPlayers)
			{
				var tempPlayer = await FaceItInfoService.GetPlayerInfoAsync(player.Nickname);

				if (tempPlayer.Nickname == player.Nickname)
				{
					var tempFaceItStats = await FaceItStatsService.GetPlayerStatsAsync(tempPlayer.PlayerId);

					if (tempFaceItStats.PlayerId == player.PlayerId)
					{
						allPlayers.Add(tempPlayer);
						allStats.Add(tempFaceItStats);
					}
				}
			}
		}
		StateHasChanged();
	}

	private async Task HandleSearch()
	{
		try
		{
			if (allPlayers.Any(x => x.Nickname == searchName))
			{
				return;
			}
			player = await FaceItInfoService.GetPlayerInfoAsync(searchName);

			if (player.Nickname == searchName)
			{
				faceItStats = await FaceItStatsService.GetPlayerStatsAsync(player.PlayerId);

				if (faceItStats.PlayerId == player.PlayerId)
				{
					allPlayers.Add(player);
					allStats.Add(faceItStats);

					await LocalStorage.SetItemAsync("allPlayersList", allPlayers);
				}
			}
			searchName = "";
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			searchName = "Findes ikke på faceit!";
		}
		StateHasChanged();
	}

	private async Task RemovePlayer(int index)
	{
		index -= 1;
		if (index >= 0 && index < allPlayers.Count)
		{
			allPlayers.RemoveAt(index);
			allStats.RemoveAt(index);

			await LocalStorage.SetItemAsync("allPlayersList", allPlayers);
			StateHasChanged();
		}
	}
}
